<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\03oos_openwsn.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\03oos_openwsn.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Jun 23 20:37:27 2024
<BR><P>
<H3>Maximum Stack Usage =       1280 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
task_sixtopNotifReceive &rArr; iphc_receive &rArr; forwarding_receive &rArr; icmpv6_receive &rArr; icmpv6rpl_receive &rArr; icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[31]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[89]">idmanager_getMyID</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80]">openserial_printLog</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">ADC_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[11]">EXT_GPIO10_ACTIVELOW</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[7]">EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[f]">EXT_GPIO8_ACTIVEHIGH_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[10]">EXT_GPIO9_ACTIVELOW_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[8]">EXT_OPTICAL_IRQ_IN_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[e]">OPTICAL_SFD_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[d]">RAWCHIPS_32_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[c]">RAWCHIPS_STARTVAL_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[b]">RFTIMER_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[a]">RF_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[2f]">Reset_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[6]">UART_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[30]">__main</a> from __main.o(!!!main) referenced from cm0dsasm.o(.text)
 <LI><a href="#[14]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[13]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[19]">icmpv6rpl_timer_DAO_cb</a> from icmpv6rpl.o(i.icmpv6rpl_timer_DAO_cb) referenced from icmpv6rpl.o(i.icmpv6rpl_init)
 <LI><a href="#[18]">icmpv6rpl_timer_DIO_cb</a> from icmpv6rpl.o(i.icmpv6rpl_timer_DIO_cb) referenced from icmpv6rpl.o(i.icmpv6rpl_init)
 <LI><a href="#[1b]">ieee154e_endOfFrame</a> from ieee802154e.o(i.ieee154e_endOfFrame) referenced from ieee802154e.o(i.ieee154e_init)
 <LI><a href="#[1a]">ieee154e_startOfFrame</a> from ieee802154e.o(i.ieee154e_startOfFrame) referenced from ieee802154e.o(i.ieee154e_init)
 <LI><a href="#[17]">isr_ieee154e_inhibitStart</a> from ieee802154e.o(i.isr_ieee154e_inhibitStart) referenced from ieee802154e.o(i.activity_synchronize_newSlot)
 <LI><a href="#[17]">isr_ieee154e_inhibitStart</a> from ieee802154e.o(i.isr_ieee154e_inhibitStart) referenced from ieee802154e.o(i.endSlot)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ri4)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ri5)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ri8)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ri9)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ti1ORri1)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ti4)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ti5)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ti8)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.activity_ti9)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.endSlot)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.ieee154e_init)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.isr_ieee154e_newSlot)
 <LI><a href="#[16]">isr_ieee154e_newSlot</a> from ieee802154e.o(i.isr_ieee154e_newSlot) referenced from ieee802154e.o(i.synchronizePacket)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ri2)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ri3)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ri4)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ri5)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ri6)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ri7)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ri8)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti1ORri1)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti2)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti3)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti4)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti5)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti6)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti7)
 <LI><a href="#[15]">isr_ieee154e_timer</a> from ieee802154e.o(i.isr_ieee154e_timer) referenced from ieee802154e.o(i.activity_ti8)
 <LI><a href="#[28]">isr_openserial_rx</a> from openserial.o(i.isr_openserial_rx) referenced from openserial.o(i.openserial_init)
 <LI><a href="#[29]">isr_openserial_tx</a> from openserial.o(i.isr_openserial_tx) referenced from openserial.o(i.openserial_init)
 <LI><a href="#[22]">msf_getMetadata</a> from msf.o(i.msf_getMetadata) referenced from msf.o(i.msf_init)
 <LI><a href="#[23]">msf_getsfid</a> from msf.o(i.msf_getsfid) referenced from msf.o(i.msf_init)
 <LI><a href="#[20]">msf_handleRCError</a> from msf.o(i.msf_handleRCError) referenced from msf.o(i.msf_init)
 <LI><a href="#[1f]">msf_timer_clear_task</a> from msf.o(i.msf_timer_clear_task) referenced from msf.o(i.msf_handleRCError)
 <LI><a href="#[24]">msf_timer_housekeeping_cb</a> from msf.o(i.msf_timer_housekeeping_cb) referenced from msf.o(i.msf_init)
 <LI><a href="#[1e]">msf_timer_waitretry_cb</a> from msf.o(i.msf_timer_waitretry_cb) referenced from msf.o(i.msf_handleRCError)
 <LI><a href="#[21]">msf_translateMetadata</a> from msf.o(i.msf_translateMetadata) referenced from msf.o(i.msf_init)
 <LI><a href="#[2a]">openserial_board_reset_cb</a> from openserial.o(i.openserial_board_reset_cb) referenced from openserial.o(i.openserial_printLog)
 <LI><a href="#[27]">openserial_debugPrint_timer_cb</a> from openserial.o(i.openserial_debugPrint_timer_cb) referenced from openserial.o(i.openserial_init)
 <LI><a href="#[2b]">opentimers_timer_callback</a> from opentimers.o(i.opentimers_timer_callback) referenced from opentimers.o(i.opentimers_init)
 <LI><a href="#[2d]">sixtop_maintenance_timer_cb</a> from sixtop.o(i.sixtop_maintenance_timer_cb) referenced from sixtop.o(i.sixtop_init)
 <LI><a href="#[2c]">sixtop_sendingEb_timer_cb</a> from sixtop.o(i.sixtop_sendingEb_timer_cb) referenced from sixtop.o(i.sixtop_init)
 <LI><a href="#[2e]">sixtop_timeout_timer_cb</a> from sixtop.o(i.sixtop_timeout_timer_cb) referenced from sixtop.o(i.sixtop_six2six_sendDone)
 <LI><a href="#[1c]">task_printInputBufferOverflow</a> from openserial.o(i.task_printInputBufferOverflow) referenced from openserial.o(i.isr_openserial_rx)
 <LI><a href="#[1d]">task_printWrongCRCInput</a> from openserial.o(i.task_printWrongCRCInput) referenced from openserial.o(i.isr_openserial_rx)
 <LI><a href="#[25]">task_sixtopNotifReceive</a> from sixtop.o(i.task_sixtopNotifReceive) referenced from ieee802154e.o(i.notif_receive)
 <LI><a href="#[26]">task_sixtopNotifSendDone</a> from sixtop.o(i.task_sixtopNotifSendDone) referenced from ieee802154e.o(i.notif_sendDone)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[32]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[34]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ff]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[200]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[35]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[201]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[36]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[37]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[39]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[202]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[203]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[204]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[205]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[206]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[207]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[208]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[209]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[210]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[211]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[212]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[213]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[214]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[215]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[216]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[43]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[217]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[218]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[219]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[21a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[21b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[21c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[21d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[21e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[33]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[21f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[220]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mote_main &rArr; openstack_init &rArr; schedule_init &rArr; schedule_startDAGroot &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[221]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[66]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[42]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[222]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[44]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_duplicatePacket
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cm0dsasm.o(.text))

<P><STRONG><a name="[6]"></a>UART_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Handler &rArr; uart_rx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>ADC_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ADC_Handler &rArr; adc_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RF_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_Handler &rArr; radio_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RFTIMER_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFTIMER_Handler &rArr; sctimer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler &rArr; ext_gpio3_activehigh_debounced_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio3_activehigh_debounced_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXT_GPIO8_ACTIVEHIGH_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO8_ACTIVEHIGH_Handler &rArr; ext_gpio8_activehigh_isr &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio8_activehigh_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXT_GPIO9_ACTIVELOW_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO9_ACTIVELOW_Handler &rArr; ext_gpio9_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio9_activelow_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXT_GPIO10_ACTIVELOW</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO10_ACTIVELOW &rArr; ext_gpio10_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio10_activelow_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RAWCHIPS_STARTVAL_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RAWCHIPS_STARTVAL_Handler &rArr; rawchips_startval_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_startval_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAWCHIPS_32_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RAWCHIPS_32_Handler &rArr; rawchips_32_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_32_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXT_OPTICAL_IRQ_IN_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_32_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>OPTICAL_SFD_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = OPTICAL_SFD_Handler &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cm0dsasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[224]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_isr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_32_isr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio9_activelow_isr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio3_activehigh_debounced_isr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio10_activelow_isr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_isr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_addCells
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[54]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[38]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3a]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[225]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_loadPacket
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eui64_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_setDataKey
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_setBeaconKey
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_schedule
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_neighbors
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_id
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_getInputBuffer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_receive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac64bToIp128b
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_calculateChecksum
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_updateNextHopPayload
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_writeDODAGid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setMyID
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_removeCells
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_addCells
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedTxCellToNonParent
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_ip128bToMac64b
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerNewNeighbor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateTx
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateRx
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborEui64
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateRx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getSlotInfo
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNeighbor
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_isMyAddress
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_sendDone
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getRPLDODAGid
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[226]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[5c]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_candidateAddCellList
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_resetEntry
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_resetBackupEntry
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getSlotInfo
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
</UL>

<P><STRONG><a name="[227]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_six2six_timeout_fired
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_areAvailableCellsToBeRemoved
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_startDAGroot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_uread4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
</UL>

<P><STRONG><a name="[229]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStats
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
</UL>

<P><STRONG><a name="[22a]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getLinkMetric
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_syncSlotOffset
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_schedule
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_neighbors
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_management_fired
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_hashFunction_getSlotoffset
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_handleRCError
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_candidateAddCellList
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getCellsToBeRelocated
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateBackoff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementAsnOffset
</UL>

<P><STRONG><a name="[22d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[53]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[58]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[62]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[3c]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[41]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[232]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[233]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>GPI_control</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, scm3c_hw_interface.o(i.GPI_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPI_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[6a]"></a>GPI_enables</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, scm3c_hw_interface.o(i.GPI_enables))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[6b]"></a>GPO_control</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, scm3c_hw_interface.o(i.GPO_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPO_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[6c]"></a>GPO_enables</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, scm3c_hw_interface.o(i.GPO_enables))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPO_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[85]"></a>IEEE802154_security_acceptableLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_acceptableLevel))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[1f2]"></a>IEEE802154_security_getBeaconKeyIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_getBeaconKeyIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
</UL>

<P><STRONG><a name="[1ef]"></a>IEEE802154_security_getDataKeyIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_getDataKeyIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send
</UL>

<P><STRONG><a name="[1ee]"></a>IEEE802154_security_getSecurityLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_getSecurityLevel))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send
</UL>

<P><STRONG><a name="[87]"></a>IEEE802154_security_incomingFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_incomingFrame))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[6d]"></a>IEEE802154_security_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ieee802154_security.o(i.IEEE802154_security_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IEEE802154_security_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
</UL>

<P><STRONG><a name="[86]"></a>IEEE802154_security_isConfigured</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_isConfigured))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
</UL>

<P><STRONG><a name="[96]"></a>IEEE802154_security_outgoingFrameSecurity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_outgoingFrameSecurity))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
</UL>

<P><STRONG><a name="[13e]"></a>IEEE802154_security_prependAuxiliarySecurityHeader</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154_security.o(i.IEEE802154_security_prependAuxiliarySecurityHeader))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
</UL>

<P><STRONG><a name="[6e]"></a>IEEE802154_security_setBeaconKey</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ieee802154_security.o(i.IEEE802154_security_setBeaconKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IEEE802154_security_setBeaconKey &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
</UL>

<P><STRONG><a name="[6f]"></a>IEEE802154_security_setDataKey</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ieee802154_security.o(i.IEEE802154_security_setDataKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IEEE802154_security_setDataKey &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
</UL>

<P><STRONG><a name="[70]"></a>LC_FREQCHANGE</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, scm3c_hw_interface.o(i.LC_FREQCHANGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flipChar
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGTFrequencyRX
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyTX
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyRX
</UL>

<P><STRONG><a name="[72]"></a>LC_monotonic</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, scm3c_hw_interface.o(i.LC_monotonic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LC_monotonic &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[e6]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, openserial.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_writeAddress
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_readAddress
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setMyID
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_isMyAddress
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
</UL>

<P><STRONG><a name="[45]"></a>_sys_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[74]"></a>activity_ri2</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ri2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = activity_ri2 &rArr; radio_setGTFrequency &rArr; setGTFrequencyRX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setGTFrequency
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[7a]"></a>activity_ri3</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ri3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ri3 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxNow
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[7c]"></a>activity_ri4</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ri4))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ri4 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_startOfFrame
</UL>

<P><STRONG><a name="[7d]"></a>activity_ri5</STRONG> (Thumb, 780 bytes, Stack size 128 bytes, ieee802154e.o(i.activity_ri5))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = activity_ri5 &rArr; ieee154e_processIEs &rArr; isValidEbFormat &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_isConfigured
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_incomingFrame
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_acceptableLevel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_retrieveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedCellToNeighbor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossFooter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_isPreferredParent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidRxFrame
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_endOfFrame
</UL>

<P><STRONG><a name="[94]"></a>activity_ri6</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ri6))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = activity_ri6 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_loadPacket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_outgoingFrameSecurity
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveFooter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[9b]"></a>activity_ri7</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ri7))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ri7 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txNow
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[9d]"></a>activity_ri8</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ri8))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ri8 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_startOfFrame
</UL>

<P><STRONG><a name="[9e]"></a>activity_ri9</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ri9))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = activity_ri9 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_isConfigured
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_isPreferredParent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_endOfFrame
</UL>

<P><STRONG><a name="[9f]"></a>activity_rie1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_rie1))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_rie1 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[a0]"></a>activity_rie3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_rie3))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_rie3 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[a1]"></a>activity_rie4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_rie4))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_rie4 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[a2]"></a>activity_rie5</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_rie5))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_rie5 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[a3]"></a>activity_rie6</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_rie6))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_rie6 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[a4]"></a>activity_synchronize_endOfFrame</STRONG> (Thumb, 606 bytes, Stack size 88 bytes, ieee802154e.o(i.activity_synchronize_endOfFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = activity_synchronize_endOfFrame &rArr; isValidJoin &rArr; ieee154e_processIEs &rArr; isValidEbFormat &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_acceptableLevel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_retrieveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossFooter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_endOfFrame
</UL>

<P><STRONG><a name="[a7]"></a>activity_synchronize_newSlot</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_synchronize_newSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = activity_synchronize_newSlot &rArr; openserial_inhibitStop &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxNow
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_inhibitStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateFrequency
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
</UL>

<P><STRONG><a name="[ad]"></a>activity_synchronize_startOfFrame</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_synchronize_startOfFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = activity_synchronize_startOfFrame &rArr; openserial_inhibitStart &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_inhibitStart
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_startOfFrame
</UL>

<P><STRONG><a name="[af]"></a>activity_ti1ORri1</STRONG> (Thumb, 762 bytes, Stack size 56 bytes, ieee802154e.o(i.activity_ti1ORri1))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = activity_ti1ORri1 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_slot_toggle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_frame_toggle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_getAsn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getType
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getShared
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getOkToSend
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNextActiveSlotOffset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNeighbor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getFrameLength
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getChannelOffset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advanceSlot
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetUnicastPacket
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetKaPacket
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetEBPacket
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetDIOPacket
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_updateCellsUsed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_updateCellsElapsed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsSlotSkip
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementAsnOffset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateFrequency
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
</UL>

<P><STRONG><a name="[c5]"></a>activity_ti2</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ti2))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = activity_ti2 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_loadPacket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_outgoingFrameSecurity
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveFooter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_duplicatePacket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[c7]"></a>activity_ti3</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ti3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ti3 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txNow
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[c8]"></a>activity_ti4</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ti4))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ti4 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_startOfFrame
</UL>

<P><STRONG><a name="[c9]"></a>activity_ti5</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ieee802154e.o(i.activity_ti5))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = activity_ti5 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setGTFrequency
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_sendDone
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_endOfFrame
</UL>

<P><STRONG><a name="[cc]"></a>activity_ti6</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ti6))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = activity_ti6 &rArr; radio_setFrequency &rArr; setFrequencyTX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[cd]"></a>activity_ti7</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ti7))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ti7 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxNow
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[ce]"></a>activity_ti8</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ieee802154e.o(i.activity_ti8))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = activity_ti8 &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_startOfFrame
</UL>

<P><STRONG><a name="[cf]"></a>activity_ti9</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, ieee802154e.o(i.activity_ti9))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = activity_ti9 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_incomingFrame
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_acceptableLevel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_retrieveHeader
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossFooter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_isPreferredParent
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_sendDone
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidAck
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_endOfFrame
</UL>

<P><STRONG><a name="[d1]"></a>activity_tie1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_tie1))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_tie1 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[d2]"></a>activity_tie2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_tie2))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_tie2 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[d3]"></a>activity_tie3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_tie3))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_tie3 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[d4]"></a>activity_tie4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_tie4))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_tie4 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[d5]"></a>activity_tie5</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_tie5))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_tie5 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_sendDone
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[d6]"></a>activity_tie6</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ieee802154e.o(i.activity_tie6))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = activity_tie6 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
</UL>

<P><STRONG><a name="[47]"></a>adc_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc.o(i.adc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = adc_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[14c]"></a>analog_scan_chain_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.analog_scan_chain_load))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[14b]"></a>analog_scan_chain_write</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.analog_scan_chain_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = analog_scan_chain_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[162]"></a>asnStoreFromEB</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ieee802154e.o(i.asnStoreFromEB))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[d7]"></a>board_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = board_init &rArr; initialize_mote &rArr; radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_getCalibrationFinshed
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eui64_get
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32c
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[1a2]"></a>board_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.board_reset))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_push_task
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_handleRxFrame
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_board_reset_cb
</UL>

<P><STRONG><a name="[1e3]"></a>board_sleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.board_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_start
</UL>

<P><STRONG><a name="[ab]"></a>calculateFrequency</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ieee802154e.o(i.calculateFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
</UL>

<P><STRONG><a name="[a6]"></a>changeIsSync</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ieee802154e.o(i.changeIsSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = changeIsSync &rArr; resetStats
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_sync_on
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_sync_off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_resetBackoff
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStats
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
</UL>

<P><STRONG><a name="[75]"></a>changeState</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ieee802154e.o(i.changeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = changeState &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_fsm_toggle
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_fsm_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_fsm_clr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti8
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti7
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti6
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_startOfFrame
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri8
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri7
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri2
</UL>

<P><STRONG><a name="[161]"></a>channelhoppingTemplateIDStoreFromEB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154e.o(i.channelhoppingTemplateIDStoreFromEB))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[69]"></a>clear_asc_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.clear_asc_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
</UL>

<P><STRONG><a name="[d9]"></a>crc32c</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, scm3c_hw_interface.o(i.crc32c))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crc32c
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[14e]"></a>crcIteration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, openhdlc.o(i.crcIteration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crcIteration
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputHdlcWrite
</UL>

<P><STRONG><a name="[eb]"></a>debugPrint_asn</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ieee802154e.o(i.debugPrint_asn))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = debugPrint_asn &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[ed]"></a>debugPrint_backoff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, schedule.o(i.debugPrint_backoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debugPrint_backoff &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[ee]"></a>debugPrint_id</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, idmanager.o(i.debugPrint_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = debugPrint_id &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[ef]"></a>debugPrint_isSync</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ieee802154e.o(i.debugPrint_isSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debugPrint_isSync &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f0]"></a>debugPrint_joined</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, idmanager.o(i.debugPrint_joined))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = debugPrint_joined &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f1]"></a>debugPrint_kaPeriod</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sixtop.o(i.debugPrint_kaPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debugPrint_kaPeriod &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f2]"></a>debugPrint_macStats</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ieee802154e.o(i.debugPrint_macStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debugPrint_macStats &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f3]"></a>debugPrint_msf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, msf.o(i.debugPrint_msf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debugPrint_msf &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f4]"></a>debugPrint_myDAGrank</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sixtop.o(i.debugPrint_myDAGrank))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debugPrint_myDAGrank &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f5]"></a>debugPrint_neighbors</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, neighbors.o(i.debugPrint_neighbors))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = debugPrint_neighbors &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f6]"></a>debugPrint_outBufferIndexes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, openserial.o(i.debugPrint_outBufferIndexes))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = debugPrint_outBufferIndexes &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f7]"></a>debugPrint_queue</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, openqueue.o(i.debugPrint_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = debugPrint_queue &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[f8]"></a>debugPrint_schedule</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, schedule.o(i.debugPrint_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = debugPrint_schedule &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>

<P><STRONG><a name="[b2]"></a>debugpins_frame_toggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_frame_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[e8]"></a>debugpins_fsm_clr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_fsm_clr))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>

<P><STRONG><a name="[e7]"></a>debugpins_fsm_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_fsm_set))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>

<P><STRONG><a name="[e9]"></a>debugpins_fsm_toggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_fsm_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
</UL>

<P><STRONG><a name="[da]"></a>debugpins_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_init))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1d4]"></a>debugpins_isr_clr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_isr_clr))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_isr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[1d3]"></a>debugpins_isr_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_isr_set))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_isr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[1d7]"></a>debugpins_radio_clr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_radio_clr))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
</UL>

<P><STRONG><a name="[1d9]"></a>debugpins_radio_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_radio_set))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
</UL>

<P><STRONG><a name="[b1]"></a>debugpins_slot_toggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_slot_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[1e2]"></a>debugpins_task_clr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_task_clr))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_start
</UL>

<P><STRONG><a name="[1e4]"></a>debugpins_task_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_task_set))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_start
</UL>

<P><STRONG><a name="[1ca]"></a>divProgram</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.divProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = divProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[81]"></a>endSlot</STRONG> (Thumb, 566 bytes, Stack size 80 bytes, ieee802154e.o(i.endSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_getValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_inhibitStop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedCellToNeighbor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getType
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getSlottOffset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getSlotInfo
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNeighbor
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getIsAutoCell
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetUnicastPacket
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_updateCellsUsed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_updateCellsElapsed
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_sendDone
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_startOfFrame
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_endOfFrame
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie6
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie5
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie6
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie5
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie3
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie1
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[df]"></a>eui64_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eui64.o(i.eui64_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eui64_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_init
</UL>

<P><STRONG><a name="[4d]"></a>ext_gpio10_activelow_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio10_activelow_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio10_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO10_ACTIVELOW
</UL>

<P><STRONG><a name="[4a]"></a>ext_gpio3_activehigh_debounced_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio3_activehigh_debounced_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio3_activehigh_debounced_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler
</UL>

<P><STRONG><a name="[4b]"></a>ext_gpio8_activehigh_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio8_activehigh_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ext_gpio8_activehigh_isr &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO8_ACTIVEHIGH_Handler
</UL>

<P><STRONG><a name="[4c]"></a>ext_gpio9_activelow_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio9_activelow_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio9_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO9_ACTIVELOW_Handler
</UL>

<P><STRONG><a name="[63]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[71]"></a>flipChar</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.flipChar))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>

<P><STRONG><a name="[1e6]"></a>flip_lsb8</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.flip_lsb8))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
</UL>

<P><STRONG><a name="[fe]"></a>forwarding_createRplOption</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, forwarding.o(i.forwarding_createRplOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = forwarding_createRplOption
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getRPLIntanceID
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[100]"></a>forwarding_getNextHop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, forwarding.o(i.forwarding_getNextHop))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = forwarding_getNextHop &rArr; icmpv6rpl_getPreferredParentEui64 &rArr; neighbors_getNeighborEui64 &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
</UL>

<P><STRONG><a name="[1ae]"></a>forwarding_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, forwarding.o(i.forwarding_init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[101]"></a>forwarding_receive</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, forwarding.o(i.forwarding_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = forwarding_receive &rArr; icmpv6_receive &rArr; icmpv6rpl_receive &rArr; icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_isHighPriorityEntryEnough
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_isMyAddress
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_receive
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_createRplOption
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
</UL>

<P><STRONG><a name="[107]"></a>forwarding_send</STRONG> (Thumb, 444 bytes, Stack size 328 bytes, forwarding.o(i.forwarding_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_prependIPv6Header
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isLinkLocal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isAllRoutersMulticast
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isAllHostsMulticast
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_ip128bToMac64b
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_createRplOption
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_send
</UL>

<P><STRONG><a name="[10e]"></a>forwarding_sendDone</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, forwarding.o(i.forwarding_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = forwarding_sendDone &rArr; icmpv6_sendDone &rArr; icmpv6rpl_sendDone &rArr; packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_sendDone
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendDone
</UL>

<P><STRONG><a name="[105]"></a>forwarding_send_internal_RoutingTable</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, forwarding.o(i.forwarding_send_internal_RoutingTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isLinkLocal
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_ip128bToMac64b
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_isStableNeighbor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_getNextHop
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[106]"></a>forwarding_send_internal_SourceRouting</STRONG> (Thumb, 1376 bytes, Stack size 304 bytes, forwarding.o(i.forwarding_send_internal_SourceRouting))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = forwarding_send_internal_SourceRouting &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6HopByHopHeader
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_ip128bToMac64b
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getRPLDODAGid
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_createRplOption
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
</UL>

<P><STRONG><a name="[13]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1af]"></a>icmpv6_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(i.icmpv6_init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[103]"></a>icmpv6_receive</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, icmpv6.o(i.icmpv6_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = icmpv6_receive &rArr; icmpv6rpl_receive &rArr; icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
</UL>

<P><STRONG><a name="[117]"></a>icmpv6_send</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, icmpv6.o(i.icmpv6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[10f]"></a>icmpv6_sendDone</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, icmpv6.o(i.icmpv6_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = icmpv6_sendDone &rArr; icmpv6rpl_sendDone &rArr; packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_sendDone
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_sendDone
</UL>

<P><STRONG><a name="[119]"></a>icmpv6rpl_daoSent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_daoSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icmpv6rpl_daoSent
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
</UL>

<P><STRONG><a name="[c4]"></a>icmpv6rpl_getMyDAGrank</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmpv6rpl.o(i.icmpv6rpl_getMyDAGrank))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_myDAGrank
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_isNeighborWithHigherDAGrank
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_createRplOption
</UL>

<P><STRONG><a name="[8d]"></a>icmpv6rpl_getPreferredParentEui64</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_getPreferredParentEui64))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_getPreferredParentEui64 &rArr; neighbors_getNeighborEui64 &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborNoResource
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborEui64
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_trigger6pAdd
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_timer_clear_task
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_removeOld
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_getNextHop
</UL>

<P><STRONG><a name="[18a]"></a>icmpv6rpl_getPreferredParentIndex</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icmpv6rpl.o(i.icmpv6rpl_getPreferredParentIndex))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getKANeighbor
</UL>

<P><STRONG><a name="[112]"></a>icmpv6rpl_getRPLDODAGid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_getRPLDODAGid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icmpv6rpl_getRPLDODAGid &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
</UL>

<P><STRONG><a name="[ff]"></a>icmpv6rpl_getRPLIntanceID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmpv6rpl.o(i.icmpv6rpl_getRPLIntanceID))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_createRplOption
</UL>

<P><STRONG><a name="[11c]"></a>icmpv6rpl_indicateRxDIO</STRONG> (Thumb, 614 bytes, Stack size 72 bytes, icmpv6rpl.o(i.icmpv6rpl_indicateRxDIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_indicateRxDIO &rArr; icmpv6rpl_updateMyDAGrankAndParentSelection &rArr; icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_writeDODAGid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setMyID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_setNeighborRank
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborRank
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborEui64
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
</UL>

<P><STRONG><a name="[122]"></a>icmpv6rpl_init</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, icmpv6rpl.o(i.icmpv6rpl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = icmpv6rpl_init &rArr; opentimers_scheduleIn &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[8f]"></a>icmpv6rpl_isPreferredParent</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, icmpv6rpl.o(i.icmpv6rpl_isPreferredParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_isPreferredParent &rArr; neighbors_getNeighborEui64 &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborEui64
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_updateCellsUsed
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[116]"></a>icmpv6rpl_receive</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, icmpv6rpl.o(i.icmpv6rpl_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_receive &rArr; icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_isConfigured
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DIO_task
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_receive
</UL>

<P><STRONG><a name="[118]"></a>icmpv6rpl_sendDone</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, icmpv6rpl.o(i.icmpv6rpl_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_sendDone &rArr; packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_sendDone
</UL>

<P><STRONG><a name="[19]"></a>icmpv6rpl_timer_DAO_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_timer_DAO_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_timer_DAO_cb &rArr; icmpv6rpl_timer_DAO_task &rArr; sendDAO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DAO_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icmpv6rpl.o(i.icmpv6rpl_init)
</UL>
<P><STRONG><a name="[126]"></a>icmpv6rpl_timer_DAO_task</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_timer_DAO_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_timer_DAO_task &rArr; sendDAO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DAO_cb
</UL>

<P><STRONG><a name="[18]"></a>icmpv6rpl_timer_DIO_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_timer_DIO_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_timer_DIO_cb &rArr; icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DIO_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icmpv6rpl.o(i.icmpv6rpl_init)
</UL>
<P><STRONG><a name="[125]"></a>icmpv6rpl_timer_DIO_task</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_timer_DIO_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DIO_cb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
</UL>

<P><STRONG><a name="[121]"></a>icmpv6rpl_updateMyDAGrankAndParentSelection</STRONG> (Thumb, 446 bytes, Stack size 64 bytes, icmpv6rpl.o(i.icmpv6rpl_updateMyDAGrankAndParentSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_updateMyDAGrankAndParentSelection &rArr; icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_setPreferredParent
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_reachedMinimalTransmission
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_isStableNeighborByIndex
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborRank
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborNoResource
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborEui64
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getLinkMetric
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateNexthopAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setIsDAGroot
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_setNeighborNoResource
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateTx
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
</UL>

<P><STRONG><a name="[12d]"></a>icmpv6rpl_updateNexthopAddress</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_updateNexthopAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_updateNextHopPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
</UL>

<P><STRONG><a name="[11d]"></a>icmpv6rpl_writeDODAGid</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, icmpv6rpl.o(i.icmpv6rpl_writeDODAGid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icmpv6rpl_writeDODAGid &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
</UL>

<P><STRONG><a name="[8e]"></a>idmanager_getIsDAGroot</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, idmanager.o(i.idmanager_getIsDAGroot))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromBridge
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_daoSent
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
</UL>

<P><STRONG><a name="[b6]"></a>idmanager_getIsSlotSkip</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, idmanager.o(i.idmanager_getIsSlotSkip))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[89]"></a>idmanager_getMyID</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, idmanager.o(i.idmanager_getMyID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = idmanager_getMyID &rArr;  openserial_printLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_openserial_print
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_prependIPv6Header
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_calculateChecksum
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidRxFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidAck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[12f]"></a>idmanager_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, idmanager.o(i.idmanager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = idmanager_init &rArr; packetfunctions_mac64bToMac16b &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eui64_get
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac64bToMac16b
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[102]"></a>idmanager_isMyAddress</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, idmanager.o(i.idmanager_isMyAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = idmanager_isMyAddress &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidRxFrame
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidAck
</UL>

<P><STRONG><a name="[131]"></a>idmanager_setIsDAGroot</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, idmanager.o(i.idmanager_setIsDAGroot))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = idmanager_setIsDAGroot &rArr; icmpv6rpl_updateMyDAGrankAndParentSelection &rArr; icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_startDAGroot
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
</UL>

<P><STRONG><a name="[11e]"></a>idmanager_setMyID</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, idmanager.o(i.idmanager_setMyID))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = idmanager_setMyID &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
</UL>

<P><STRONG><a name="[133]"></a>idmanager_triggerAboutRoot</STRONG> (Thumb, 220 bytes, Stack size 88 bytes, idmanager.o(i.idmanager_triggerAboutRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = idmanager_triggerAboutRoot &rArr; idmanager_setIsDAGroot &rArr; icmpv6rpl_updateMyDAGrankAndParentSelection &rArr; icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_setDataKey
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_setBeaconKey
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_getInputBuffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_writeDODAGid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setMyID
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setIsDAGroot
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_handleRxFrame
</UL>

<P><STRONG><a name="[18b]"></a>ieee154e_asnDiff</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ieee802154e.o(i.ieee154e_asnDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee154e_asnDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_removeOld
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getKANeighbor
</UL>

<P><STRONG><a name="[1b]"></a>ieee154e_endOfFrame</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ieee802154e.o(i.ieee154e_endOfFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ieee154e_endOfFrame &rArr; activity_ri5 &rArr; ieee154e_processIEs &rArr; isValidEbFormat &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802154e.o(i.ieee154e_init)
</UL>
<P><STRONG><a name="[c3]"></a>ieee154e_getAsn</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ieee802154e.o(i.ieee154e_getAsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ieee154e_getAsn
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[13d]"></a>ieee154e_getTimeCorrection</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ieee802154e.o(i.ieee154e_getTimeCorrection))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
</UL>

<P><STRONG><a name="[135]"></a>ieee154e_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ieee802154e.o(i.ieee154e_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ieee154e_init &rArr; opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartFrameCb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setEndFrameCb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_create
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStats
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[17c]"></a>ieee154e_isSynch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154e.o(i.ieee154e_isSynch))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_trigger6pAdd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[8b]"></a>ieee154e_processIEs</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ieee802154e.o(i.ieee154e_processIEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ieee154e_processIEs &rArr; isValidEbFormat &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_syncSlotOffset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNextActiveSlotOffset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getChannelOffset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_syncSlotOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[16a]"></a>ieee154e_resetAsn</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ieee802154e.o(i.ieee154e_resetAsn))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
</UL>

<P><STRONG><a name="[1a]"></a>ieee154e_startOfFrame</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ieee802154e.o(i.ieee154e_startOfFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ieee154e_startOfFrame &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti4
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_startOfFrame
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri8
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802154e.o(i.ieee154e_init)
</UL>
<P><STRONG><a name="[13a]"></a>ieee154e_syncSlotOffset</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ieee802154e.o(i.ieee154e_syncSlotOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ieee154e_syncSlotOffset &rArr; schedule_syncSlotOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_syncSlotOffset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNextActiveSlotOffset
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getFrameLength
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getChannelOffset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
</UL>

<P><STRONG><a name="[95]"></a>ieee802154_prependHeader</STRONG> (Thumb, 632 bytes, Stack size 64 bytes, ieee802154.o(i.ieee802154_prependHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_writeAddress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_getTimeCorrection
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_prependAuxiliarySecurityHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
</UL>

<P><STRONG><a name="[84]"></a>ieee802154_retrieveHeader</STRONG> (Thumb, 886 bytes, Stack size 48 bytes, ieee802154.o(i.ieee802154_retrieveHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ieee802154_retrieveHeader &rArr; packetfunctions_readAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topology_isAcceptablePacket
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_readAddress
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[b0]"></a>incrementAsnOffset</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ieee802154e.o(i.incrementAsnOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = incrementAsnOffset &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getFrameLength
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[142]"></a>init_ldo_control</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, scm3c_hw_interface.o(i.init_ldo_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_ldo_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[d8]"></a>initialize_mote</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.initialize_mote))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = initialize_mote &rArr; radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[16e]"></a>inputHdlcClose</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, openserial.o(i.inputHdlcClose))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_rx
</UL>

<P><STRONG><a name="[16c]"></a>inputHdlcOpen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, openserial.o(i.inputHdlcOpen))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_rx
</UL>

<P><STRONG><a name="[14d]"></a>inputHdlcWrite</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, openserial.o(i.inputHdlcWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inputHdlcWrite &rArr; crcIteration
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcIteration
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_rx
</UL>

<P><STRONG><a name="[14f]"></a>internal_openserial_print</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, openserial.o(i.internal_openserial_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcOpen
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcClose
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>

<P><STRONG><a name="[1ad]"></a>iphc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iphc.o(i.iphc_init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[10d]"></a>iphc_prependIPv6Header</STRONG> (Thumb, 912 bytes, Stack size 40 bytes, iphc.o(i.iphc_prependIPv6Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = iphc_prependIPv6Header &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_writeAddress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[154]"></a>iphc_prependIPv6HopByHopHeader</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, iphc.o(i.iphc_prependIPv6HopByHopHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = iphc_prependIPv6HopByHopHeader &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
</UL>

<P><STRONG><a name="[155]"></a>iphc_receive</STRONG> (Thumb, 144 bytes, Stack size 160 bytes, iphc.o(i.iphc_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = iphc_receive &rArr; forwarding_receive &rArr; icmpv6_receive &rArr; icmpv6rpl_receive &rArr; icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_receive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6HopByHopHeader
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifReceive
</UL>

<P><STRONG><a name="[156]"></a>iphc_retrieveIPv6Header</STRONG> (Thumb, 784 bytes, Stack size 160 bytes, iphc.o(i.iphc_retrieveIPv6Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = iphc_retrieveIPv6Header &rArr; iphc_retrieveIphcHeader &rArr; packetfunctions_readAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_readAddress
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac64bToIp128b
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
</UL>

<P><STRONG><a name="[114]"></a>iphc_retrieveIPv6HopByHopHeader</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, iphc.o(i.iphc_retrieveIPv6HopByHopHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iphc_retrieveIPv6HopByHopHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
</UL>

<P><STRONG><a name="[159]"></a>iphc_retrieveIphcHeader</STRONG> (Thumb, 1386 bytes, Stack size 56 bytes, iphc.o(i.iphc_retrieveIphcHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = iphc_retrieveIphcHeader &rArr; packetfunctions_readAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_readAddress
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac64bToIp128b
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac16bToMac64b
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
</UL>

<P><STRONG><a name="[15b]"></a>iphc_sendDone</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iphc.o(i.iphc_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = iphc_sendDone &rArr; forwarding_sendDone &rArr; icmpv6_sendDone &rArr; icmpv6rpl_sendDone &rArr; packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_sendDone
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_sendDone
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifSendDone
</UL>

<P><STRONG><a name="[15d]"></a>iphc_sendFromBridge</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iphc.o(i.iphc_sendFromBridge))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = iphc_sendFromBridge &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
</UL>

<P><STRONG><a name="[111]"></a>iphc_sendFromForwarding</STRONG> (Thumb, 550 bytes, Stack size 144 bytes, iphc.o(i.iphc_sendFromForwarding))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_writeAddress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_prependIPv6HopByHopHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac64bToIp128b
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isAllRoutersMulticast
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_ip128bToMac64b
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
</UL>

<P><STRONG><a name="[15f]"></a>isNeighbor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, neighbors.o(i.isNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = isNeighbor &rArr; isThisRowMatching &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isThisRowMatching
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerNewNeighbor
</UL>

<P><STRONG><a name="[160]"></a>isThisRowMatching</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, neighbors.o(i.isThisRowMatching))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = isThisRowMatching &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_setNeighborNoResource
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_isStableNeighbor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateTx
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateRx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNeighbor
</UL>

<P><STRONG><a name="[d0]"></a>isValidAck</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ieee802154e.o(i.isValidAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = isValidAck &rArr; idmanager_isMyAddress &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_isMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
</UL>

<P><STRONG><a name="[139]"></a>isValidEbFormat</STRONG> (Thumb, 522 bytes, Stack size 112 bytes, ieee802154e.o(i.isValidEbFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = isValidEbFormat &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setFrameNumber
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setFrameLength
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setFrameHandle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getFrameLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslotTemplateIDStoreFromEB
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joinPriorityStoreFromEB
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelhoppingTemplateIDStoreFromEB
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asnStoreFromEB
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
</UL>

<P><STRONG><a name="[a5]"></a>isValidJoin</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ieee802154e.o(i.isValidJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = isValidJoin &rArr; ieee154e_processIEs &rArr; isValidEbFormat &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_isConfigured
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_incomingFrame
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossFooter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
</UL>

<P><STRONG><a name="[8c]"></a>isValidRxFrame</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ieee802154e.o(i.isValidRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = isValidRxFrame &rArr; idmanager_isMyAddress &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_isMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[17]"></a>isr_ieee154e_inhibitStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ieee802154e.o(i.isr_ieee154e_inhibitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = isr_ieee154e_inhibitStart &rArr; openserial_inhibitStart &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_inhibitStart
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ieee802154e.o(i.activity_synchronize_newSlot)
<LI> ieee802154e.o(i.endSlot)
</UL>
<P><STRONG><a name="[16]"></a>isr_ieee154e_newSlot</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ieee802154e.o(i.isr_ieee154e_newSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = isr_ieee154e_newSlot &rArr; activity_ti1ORri1 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_getCurrentCompareValue
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNextActiveSlotOffset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_resetAsn
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
</UL>
<BR>[Address Reference Count : 13]<UL><LI> ieee802154e.o(i.activity_ri8)
<LI> ieee802154e.o(i.activity_ri9)
<LI> ieee802154e.o(i.activity_ti1ORri1)
<LI> ieee802154e.o(i.activity_ti4)
<LI> ieee802154e.o(i.activity_ti5)
<LI> ieee802154e.o(i.activity_ti8)
<LI> ieee802154e.o(i.activity_ti9)
<LI> ieee802154e.o(i.endSlot)
<LI> ieee802154e.o(i.ieee154e_init)
<LI> ieee802154e.o(i.isr_ieee154e_newSlot)
<LI> ieee802154e.o(i.synchronizePacket)
<LI> ieee802154e.o(i.activity_ri4)
<LI> ieee802154e.o(i.activity_ri5)
</UL>
<P><STRONG><a name="[15]"></a>isr_ieee154e_timer</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ieee802154e.o(i.isr_ieee154e_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = isr_ieee154e_timer &rArr; activity_ti2 &rArr; endSlot &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie6
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie5
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie1
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti7
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti6
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie6
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie5
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie3
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri7
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri2
</UL>
<BR>[Address Reference Count : 15]<UL><LI> ieee802154e.o(i.activity_ri7)
<LI> ieee802154e.o(i.activity_ri8)
<LI> ieee802154e.o(i.activity_ti1ORri1)
<LI> ieee802154e.o(i.activity_ti2)
<LI> ieee802154e.o(i.activity_ti3)
<LI> ieee802154e.o(i.activity_ti4)
<LI> ieee802154e.o(i.activity_ti5)
<LI> ieee802154e.o(i.activity_ti6)
<LI> ieee802154e.o(i.activity_ti7)
<LI> ieee802154e.o(i.activity_ti8)
<LI> ieee802154e.o(i.activity_ri2)
<LI> ieee802154e.o(i.activity_ri3)
<LI> ieee802154e.o(i.activity_ri4)
<LI> ieee802154e.o(i.activity_ri5)
<LI> ieee802154e.o(i.activity_ri6)
</UL>
<P><STRONG><a name="[28]"></a>isr_openserial_rx</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, openserial.o(i.isr_openserial_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = isr_openserial_rx &rArr; openserial_handleRxFrame &rArr; openbridge_triggerData &rArr; iphc_sendFromBridge &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_readByte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_push_task
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_handleRxFrame
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputHdlcWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputHdlcOpen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputHdlcClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openserial.o(i.openserial_init)
</UL>
<P><STRONG><a name="[29]"></a>isr_openserial_tx</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, openserial.o(i.isr_openserial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = isr_openserial_tx &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_writeByte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_setCTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openserial.o(i.openserial_init)
</UL>
<P><STRONG><a name="[163]"></a>joinPriorityStoreFromEB</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ieee802154e.o(i.joinPriorityStoreFromEB))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[1a8]"></a>leds_error_blink</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, leds.o(i.leds_error_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leds_error_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_push_task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>

<P><STRONG><a name="[db]"></a>leds_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_init))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1d8]"></a>leds_radio_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_radio_off))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
</UL>

<P><STRONG><a name="[1da]"></a>leds_radio_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_radio_on))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
</UL>

<P><STRONG><a name="[e4]"></a>leds_sync_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_sync_off))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
</UL>

<P><STRONG><a name="[e2]"></a>leds_sync_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_sync_on))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
</UL>

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; mote_main &rArr; openstack_init &rArr; schedule_init &rArr; schedule_startDAGroot &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[172]"></a>mote_main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 03oos_openwsn.o(i.mote_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mote_main &rArr; openstack_init &rArr; schedule_init &rArr; schedule_startDAGroot &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>msf_candidateAddCellList</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, msf.o(i.msf_candidateAddCellList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msf_candidateAddCellList &rArr; schedule_isSlotOffsetAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_isSlotOffsetAvailable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getFrameLength
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_trigger6pAdd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>

<P><STRONG><a name="[22]"></a>msf_getMetadata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msf.o(i.msf_getMetadata))
<BR>[Address Reference Count : 1]<UL><LI> msf.o(i.msf_init)
</UL>
<P><STRONG><a name="[23]"></a>msf_getsfid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msf.o(i.msf_getsfid))
<BR>[Address Reference Count : 1]<UL><LI> msf.o(i.msf_init)
</UL>
<P><STRONG><a name="[20]"></a>msf_handleRCError</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, msf.o(i.msf_handleRCError))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = msf_handleRCError &rArr; neighbors_setNeighborNoResource &rArr; icmpv6rpl_updateMyDAGrankAndParentSelection &rArr; icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_push_task
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateSequenceNumber
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_setNeighborNoResource
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msf.o(i.msf_init)
</UL>
<P><STRONG><a name="[185]"></a>msf_hashFunction_getChanneloffset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, msf.o(i.msf_hashFunction_getChanneloffset))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
</UL>

<P><STRONG><a name="[17a]"></a>msf_hashFunction_getSlotoffset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msf.o(i.msf_hashFunction_getSlotoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msf_hashFunction_getSlotoffset &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
</UL>

<P><STRONG><a name="[17b]"></a>msf_housekeeping</STRONG> (Thumb, 180 bytes, Stack size 128 bytes, msf.o(i.msf_housekeeping))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = msf_housekeeping &rArr; msf_trigger6pAdd &rArr; sixtop_request &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_trigger6pAdd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_candidateAddCellList
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_isNumTxWrapped
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedTxCellToNonParent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNumberOfNegotiatedCells
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getCellsToBeRelocated
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_isSynch
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_timer_housekeeping_task
</UL>

<P><STRONG><a name="[183]"></a>msf_init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, msf.o(i.msf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = msf_init &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_setSFcallback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_hashFunction_getSlotoffset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_hashFunction_getChanneloffset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[1f]"></a>msf_timer_clear_task</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, msf.o(i.msf_timer_clear_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = msf_timer_clear_task &rArr; sixtop_request &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msf.o(i.msf_handleRCError)
</UL>
<P><STRONG><a name="[24]"></a>msf_timer_housekeeping_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, msf.o(i.msf_timer_housekeeping_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = msf_timer_housekeeping_cb &rArr; msf_timer_housekeeping_task &rArr; msf_housekeeping &rArr; msf_trigger6pAdd &rArr; sixtop_request &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_timer_housekeeping_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msf.o(i.msf_init)
</UL>
<P><STRONG><a name="[186]"></a>msf_timer_housekeeping_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, msf.o(i.msf_timer_housekeeping_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = msf_timer_housekeeping_task &rArr; msf_housekeeping &rArr; msf_trigger6pAdd &rArr; sixtop_request &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_timer_housekeeping_cb
</UL>

<P><STRONG><a name="[1e]"></a>msf_timer_waitretry_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msf.o(i.msf_timer_waitretry_cb))
<BR>[Address Reference Count : 1]<UL><LI> msf.o(i.msf_handleRCError)
</UL>
<P><STRONG><a name="[21]"></a>msf_translateMetadata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msf.o(i.msf_translateMetadata))
<BR>[Address Reference Count : 1]<UL><LI> msf.o(i.msf_init)
</UL>
<P><STRONG><a name="[180]"></a>msf_trigger6pAdd</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, msf.o(i.msf_trigger6pAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = msf_trigger6pAdd &rArr; sixtop_request &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_candidateAddCellList
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_isSynch
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>

<P><STRONG><a name="[c0]"></a>msf_updateCellsElapsed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, msf.o(i.msf_updateCellsElapsed))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[bf]"></a>msf_updateCellsUsed</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, msf.o(i.msf_updateCellsUsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = msf_updateCellsUsed &rArr; icmpv6rpl_isPreferredParent &rArr; neighbors_getNeighborEui64 &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_isPreferredParent
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[187]"></a>neighbors_backoffHitZero</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_backoffHitZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = neighbors_backoffHitZero &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getOkToSend
</UL>

<P><STRONG><a name="[188]"></a>neighbors_decreaseBackoff</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_decreaseBackoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = neighbors_decreaseBackoff &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getOkToSend
</UL>

<P><STRONG><a name="[189]"></a>neighbors_getKANeighbor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_getKANeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = neighbors_getKANeighbor &rArr; ieee154e_asnDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentIndex
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_asnDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
</UL>

<P><STRONG><a name="[12a]"></a>neighbors_getLinkMetric</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_getLinkMetric))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = neighbors_getLinkMetric
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
</UL>

<P><STRONG><a name="[11b]"></a>neighbors_getNeighborEui64</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, neighbors.o(i.neighbors_getNeighborEui64))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = neighbors_getNeighborEui64 &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_isPreferredParent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
</UL>

<P><STRONG><a name="[11a]"></a>neighbors_getNeighborNoResource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, neighbors.o(i.neighbors_getNeighborNoResource))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
</UL>

<P><STRONG><a name="[11f]"></a>neighbors_getNeighborRank</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, neighbors.o(i.neighbors_getNeighborRank))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
</UL>

<P><STRONG><a name="[18c]"></a>neighbors_getSequenceNumber</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_getSequenceNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = neighbors_getSequenceNumber &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
</UL>

<P><STRONG><a name="[18d]"></a>neighbors_indicateRx</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, neighbors.o(i.neighbors_indicateRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = neighbors_indicateRx &rArr; registerNewNeighbor &rArr; isNeighbor &rArr; isThisRowMatching &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerNewNeighbor
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isThisRowMatching
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifReceive
</UL>

<P><STRONG><a name="[18f]"></a>neighbors_indicateTx</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, neighbors.o(i.neighbors_indicateTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = neighbors_indicateTx &rArr; icmpv6rpl_updateMyDAGrankAndParentSelection &rArr; icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isThisRowMatching
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifSendDone
</UL>

<P><STRONG><a name="[190]"></a>neighbors_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, neighbors.o(i.neighbors_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = neighbors_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[191]"></a>neighbors_isNeighborWithHigherDAGrank</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_isNeighborWithHigherDAGrank))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = neighbors_isNeighborWithHigherDAGrank
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[110]"></a>neighbors_isStableNeighbor</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, neighbors.o(i.neighbors_isStableNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = neighbors_isStableNeighbor &rArr; isThisRowMatching &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_ip128bToMac64b
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isThisRowMatching
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
</UL>

<P><STRONG><a name="[12b]"></a>neighbors_isStableNeighborByIndex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, neighbors.o(i.neighbors_isStableNeighborByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
</UL>

<P><STRONG><a name="[129]"></a>neighbors_reachedMinimalTransmission</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, neighbors.o(i.neighbors_reachedMinimalTransmission))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
</UL>

<P><STRONG><a name="[192]"></a>neighbors_removeOld</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, neighbors.o(i.neighbors_removeOld))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = neighbors_removeOld &rArr; schedule_hasAutonomousTxRxCellUnicast &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasAutonomousTxRxCellUnicast
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeNeighbor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetUnicastPacket
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_asnDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_management_fired
</UL>

<P><STRONG><a name="[195]"></a>neighbors_resetBackoff</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_resetBackoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = neighbors_resetBackoff &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
</UL>

<P><STRONG><a name="[196]"></a>neighbors_resetSequenceNumber</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_resetSequenceNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = neighbors_resetSequenceNumber &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_six2six_timeout_fired
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[178]"></a>neighbors_setNeighborNoResource</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_setNeighborNoResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = neighbors_setNeighborNoResource &rArr; icmpv6rpl_updateMyDAGrankAndParentSelection &rArr; icmpv6rpl_updateNexthopAddress &rArr; openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isThisRowMatching
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_handleRCError
</UL>

<P><STRONG><a name="[120]"></a>neighbors_setNeighborRank</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, neighbors.o(i.neighbors_setNeighborRank))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
</UL>

<P><STRONG><a name="[12c]"></a>neighbors_setPreferredParent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, neighbors.o(i.neighbors_setPreferredParent))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateMyDAGrankAndParentSelection
</UL>

<P><STRONG><a name="[197]"></a>neighbors_updateBackoff</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_updateBackoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = neighbors_updateBackoff &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
</UL>

<P><STRONG><a name="[179]"></a>neighbors_updateSequenceNumber</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, neighbors.o(i.neighbors_updateSequenceNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = neighbors_updateSequenceNumber &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_handleRCError
</UL>

<P><STRONG><a name="[92]"></a>notif_receive</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ieee802154e.o(i.notif_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = notif_receive &rArr; scheduler_push_task &rArr; leds_error_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_push_task
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateRx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[cb]"></a>notif_sendDone</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ieee802154e.o(i.notif_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = notif_sendDone &rArr; scheduler_push_task &rArr; leds_error_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_push_task
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie5
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
</UL>

<P><STRONG><a name="[1c4]"></a>onesComplementSum</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, packetfunctions.o(i.onesComplementSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = onesComplementSum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_calculateChecksum
</UL>

<P><STRONG><a name="[1b1]"></a>openapps_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, openapps.o(i.openapps_init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[1ac]"></a>openbridge_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, openbridge.o(i.openbridge_init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[157]"></a>openbridge_receive</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, openbridge.o(i.openbridge_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = openbridge_receive &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
</UL>

<P><STRONG><a name="[15c]"></a>openbridge_sendDone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, openbridge.o(i.openbridge_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = openbridge_sendDone &rArr; openqueue_freePacketBuffer &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendDone
</UL>

<P><STRONG><a name="[19a]"></a>openbridge_triggerData</STRONG> (Thumb, 164 bytes, Stack size 152 bytes, openbridge.o(i.openbridge_triggerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = openbridge_triggerData &rArr; iphc_sendFromBridge &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_getInputBufferFillLevel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_getInputBuffer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromBridge
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_handleRxFrame
</UL>

<P><STRONG><a name="[93]"></a>openqueue_freePacketBuffer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, openqueue.o(i.openqueue_freePacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = openqueue_freePacketBuffer &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_reset_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_sendDone
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_receive
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_sendDone
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifSendDone
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifReceive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_sendDone
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_sendDone
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_receive
</UL>

<P><STRONG><a name="[7f]"></a>openqueue_getFreePacketBuffer</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, openqueue.o(i.openqueue_getFreePacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = openqueue_getFreePacketBuffer &rArr; openqueue_isHighPriorityEntryEnough
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_isHighPriorityEntryEnough
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_isSynch
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[19d]"></a>openqueue_getNum6PReq</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, openqueue.o(i.openqueue_getNum6PReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = openqueue_getNum6PReq &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
</UL>

<P><STRONG><a name="[1f5]"></a>openqueue_getNum6PResp</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, openqueue.o(i.openqueue_getNum6PResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openqueue_getNum6PResp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[19e]"></a>openqueue_init</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, openqueue.o(i.openqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = openqueue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_reset_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[104]"></a>openqueue_isHighPriorityEntryEnough</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, openqueue.o(i.openqueue_isHighPriorityEntryEnough))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openqueue_isHighPriorityEntryEnough
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
</UL>

<P><STRONG><a name="[c1]"></a>openqueue_macGetDIOPacket</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, openqueue.o(i.openqueue_macGetDIOPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = openqueue_macGetDIOPacket &rArr; packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[c2]"></a>openqueue_macGetEBPacket</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, openqueue.o(i.openqueue_macGetEBPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = openqueue_macGetEBPacket &rArr; packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[bd]"></a>openqueue_macGetKaPacket</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, openqueue.o(i.openqueue_macGetKaPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = openqueue_macGetKaPacket &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[bc]"></a>openqueue_macGetUnicastPacket</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, openqueue.o(i.openqueue_macGetUnicastPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = openqueue_macGetUnicastPacket &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_removeOld
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[19f]"></a>openqueue_remove6PrequestToNeighbor</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, openqueue.o(i.openqueue_remove6PrequestToNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = openqueue_remove6PrequestToNeighbor &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_reset_entry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
</UL>

<P><STRONG><a name="[1a0]"></a>openqueue_removeAllCreatedBy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, openqueue.o(i.openqueue_removeAllCreatedBy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = openqueue_removeAllCreatedBy
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_reset_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[19c]"></a>openqueue_reset_entry</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, openqueue.o(i.openqueue_reset_entry))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_removeAllCreatedBy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_remove6PrequestToNeighbor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
</UL>

<P><STRONG><a name="[1fc]"></a>openqueue_sixtopGetReceivedPacket</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, openqueue.o(i.openqueue_sixtopGetReceivedPacket))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifReceive
</UL>

<P><STRONG><a name="[1fd]"></a>openqueue_sixtopGetSentPacket</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, openqueue.o(i.openqueue_sixtopGetSentPacket))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifSendDone
</UL>

<P><STRONG><a name="[12e]"></a>openqueue_updateNextHopPayload</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, openqueue.o(i.openqueue_updateNextHopPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = openqueue_updateNextHopPayload &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_updateNexthopAddress
</UL>

<P><STRONG><a name="[a8]"></a>openrandom_get16b</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, openrandom.o(i.openrandom_get16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openrandom_get16b
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_sendEb_fired
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_handleRCError
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_candidateAddCellList
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateBackoff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_indicateTx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DIO_task
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DAO_task
</UL>

<P><STRONG><a name="[1a1]"></a>openrandom_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, openrandom.o(i.openrandom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = openrandom_init &rArr; idmanager_getMyID &rArr;  openserial_printLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[2a]"></a>openserial_board_reset_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, openserial.o(i.openserial_board_reset_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openserial_board_reset_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openserial.o(i.openserial_printLog)
</UL>
<P><STRONG><a name="[27]"></a>openserial_debugPrint_timer_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, openserial.o(i.openserial_debugPrint_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = openserial_debugPrint_timer_cb &rArr; task_openserial_debugPrint &rArr; debugPrint_queue &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_openserial_debugPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openserial.o(i.openserial_init)
</UL>
<P><STRONG><a name="[153]"></a>openserial_flush</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, openserial.o(i.openserial_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_writeByte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_setCTS
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_inhibitStop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_inhibitStart
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_openserial_print
</UL>

<P><STRONG><a name="[134]"></a>openserial_getInputBuffer</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, openserial.o(i.openserial_getInputBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = openserial_getInputBuffer &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
</UL>

<P><STRONG><a name="[19b]"></a>openserial_getInputBufferFillLevel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, openserial.o(i.openserial_getInputBufferFillLevel))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
</UL>

<P><STRONG><a name="[1a4]"></a>openserial_handleEcho</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, openserial.o(i.openserial_handleEcho))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = openserial_handleEcho &rArr; openserial_printData &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_handleRxFrame
</UL>

<P><STRONG><a name="[16f]"></a>openserial_handleRxFrame</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, openserial.o(i.openserial_handleRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = openserial_handleRxFrame &rArr; openbridge_triggerData &rArr; iphc_sendFromBridge &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_reset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_handleEcho
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_rx
</UL>

<P><STRONG><a name="[ae]"></a>openserial_inhibitStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, openserial.o(i.openserial_inhibitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = openserial_inhibitStart &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_inhibitStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_startOfFrame
</UL>

<P><STRONG><a name="[ac]"></a>openserial_inhibitStop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, openserial.o(i.openserial_inhibitStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = openserial_inhibitStop &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
</UL>

<P><STRONG><a name="[1a5]"></a>openserial_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, openserial.o(i.openserial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = openserial_init &rArr; opentimers_scheduleIn &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_setCallbacks
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enableInterrupts
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_create
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[199]"></a>openserial_printData</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, openserial.o(i.openserial_printData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = openserial_printData &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_getAsn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcOpen
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcClose
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_handleEcho
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_receive
</UL>

<P><STRONG><a name="[80]"></a>openserial_printLog</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, openserial.o(i.openserial_printLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_error_blink
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_getValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_openserial_print
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_writeAddress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_readAddress
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_retrieveHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_triggerAboutRoot
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_printWrongCRCInput
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_printInputBufferOverflow
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_getInputBuffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_sendDone
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_sendDone
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromBridge
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6HopByHopHeader
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_prependIPv6Header
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac64bToIp128b
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac16bToMac64b
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_mac64bToMac16b
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setMyID
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_processIEs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_ip128bToMac64b
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerNewNeighbor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_isStableNeighbor
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborEui64
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isThisRowMatching
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifSendDone
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifReceive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossFooter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveFooter
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_isMyAddress
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_isPreferredParent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_timer
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_startOfFrame
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_endOfFrame
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie6
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie6
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie5
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie3
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_rie1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_sendDone
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_sendDone
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_receive
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
</UL>

<P><STRONG><a name="[ec]"></a>openserial_printStatus</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, openserial.o(i.openserial_printStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcOpen
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcClose
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_schedule
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_queue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_neighbors
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_myDAGrank
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_msf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_macStats
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_kaPeriod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_joined
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_isSync
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_id
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_backoff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_asn
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_outBufferIndexes
</UL>

<P><STRONG><a name="[174]"></a>openstack_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, openstack.o(i.openstack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = openstack_init &rArr; schedule_init &rArr; schedule_startDAGroot &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openweb_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openapps_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[1f8]"></a>opentimers_cancel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, opentimers.o(i.opentimers_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = opentimers_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_six2six_timeout_fired
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[123]"></a>opentimers_create</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, opentimers.o(i.opentimers_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = opentimers_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_init
</UL>

<P><STRONG><a name="[169]"></a>opentimers_getCurrentCompareValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, opentimers.o(i.opentimers_getCurrentCompareValue))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
</UL>

<P><STRONG><a name="[fd]"></a>opentimers_getValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, opentimers.o(i.opentimers_getValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = opentimers_getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>

<P><STRONG><a name="[1a9]"></a>opentimers_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, opentimers.o(i.opentimers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = opentimers_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_set_callback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[76]"></a>opentimers_scheduleAbsolute</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, opentimers.o(i.opentimers_scheduleAbsolute))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = opentimers_scheduleAbsolute &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_setCompare
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti8
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti7
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti6
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri8
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri7
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri2
</UL>

<P><STRONG><a name="[124]"></a>opentimers_scheduleIn</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, opentimers.o(i.opentimers_scheduleIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = opentimers_scheduleIn &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_setCompare
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_timer_callback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_handleRCError
</UL>

<P><STRONG><a name="[2b]"></a>opentimers_timer_callback</STRONG> (Thumb, 694 bytes, Stack size 24 bytes, opentimers.o(i.opentimers_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = opentimers_timer_callback &rArr; opentimers_scheduleIn &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_push_task
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_setCompare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> opentimers.o(i.opentimers_init)
</UL>
<P><STRONG><a name="[1b0]"></a>openweb_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, openweb.o(i.openweb_init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[50]"></a>optical_32_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, optical.o(i.optical_32_isr))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_OPTICAL_IRQ_IN_Handler
</UL>

<P><STRONG><a name="[e0]"></a>optical_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, optical.o(i.optical_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[e1]"></a>optical_getCalibrationFinshed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, optical.o(i.optical_getCalibrationFinshed))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[144]"></a>optical_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, optical.o(i.optical_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = optical_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[51]"></a>optical_sfd_isr</STRONG> (Thumb, 582 bytes, Stack size 96 bytes, optical.o(i.optical_sfd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_fine
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_coarse
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_fine
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_coarse
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_superfine
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_fine
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_coarse
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_HF_CLOCK_fine
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_HF_CLOCK_coarse
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_superfine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_fine
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_coarse
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_clk_target
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_HF_CLOCK_fine
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_HF_CLOCK_coarse
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio8_activehigh_isr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPTICAL_SFD_Handler
</UL>

<P><STRONG><a name="[152]"></a>outputHdlcClose</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, openserial.o(i.outputHdlcClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = outputHdlcClose &rArr; outputHdlcWrite &rArr; crcIteration
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_openserial_print
</UL>

<P><STRONG><a name="[150]"></a>outputHdlcOpen</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, openserial.o(i.outputHdlcOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = outputHdlcOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_openserial_print
</UL>

<P><STRONG><a name="[151]"></a>outputHdlcWrite</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, openserial.o(i.outputHdlcWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = outputHdlcWrite &rArr; crcIteration
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcIteration
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputHdlcClose
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_openserial_print
</UL>

<P><STRONG><a name="[1c3]"></a>packetfunctions_calculateChecksum</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, packetfunctions.o(i.packetfunctions_calculateChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = packetfunctions_calculateChecksum &rArr; packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onesComplementSum
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[c6]"></a>packetfunctions_duplicatePacket</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, packetfunctions.o(i.packetfunctions_duplicatePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetfunctions_duplicatePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
</UL>

<P><STRONG><a name="[108]"></a>packetfunctions_ip128bToMac64b</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, packetfunctions.o(i.packetfunctions_ip128bToMac64b))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = packetfunctions_ip128bToMac64b &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_isStableNeighbor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[10b]"></a>packetfunctions_isAllHostsMulticast</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, packetfunctions.o(i.packetfunctions_isAllHostsMulticast))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[10a]"></a>packetfunctions_isAllRoutersMulticast</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, packetfunctions.o(i.packetfunctions_isAllRoutersMulticast))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[bb]"></a>packetfunctions_isBroadcastMulticast</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, packetfunctions.o(i.packetfunctions_isBroadcastMulticast))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = packetfunctions_isBroadcastMulticast &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_calculateChecksum
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateTx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetEBPacket
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetDIOPacket
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidRxFrame
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_sendDone
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_getNextHop
</UL>

<P><STRONG><a name="[109]"></a>packetfunctions_isLinkLocal</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, packetfunctions.o(i.packetfunctions_isLinkLocal))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[15a]"></a>packetfunctions_mac16bToMac64b</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, packetfunctions.o(i.packetfunctions_mac16bToMac64b))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = packetfunctions_mac16bToMac64b &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
</UL>

<P><STRONG><a name="[158]"></a>packetfunctions_mac64bToIp128b</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, packetfunctions.o(i.packetfunctions_mac64bToIp128b))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = packetfunctions_mac64bToIp128b &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
</UL>

<P><STRONG><a name="[130]"></a>packetfunctions_mac64bToMac16b</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, packetfunctions.o(i.packetfunctions_mac64bToMac16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = packetfunctions_mac64bToMac16b &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_init
</UL>

<P><STRONG><a name="[140]"></a>packetfunctions_readAddress</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, packetfunctions.o(i.packetfunctions_readAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = packetfunctions_readAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_retrieveHeader
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIphcHeader
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_retrieveIPv6Header
</UL>

<P><STRONG><a name="[97]"></a>packetfunctions_reserveFooter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, packetfunctions.o(i.packetfunctions_reserveFooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = packetfunctions_reserveFooter &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
</UL>

<P><STRONG><a name="[113]"></a>packetfunctions_reserveHeader</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, packetfunctions.o(i.packetfunctions_reserveHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_writeAddress
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_triggerData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openbridge_receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_prependIPv6HopByHopHeader
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_prependIPv6Header
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
</UL>

<P><STRONG><a name="[8a]"></a>packetfunctions_sameAddress</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, packetfunctions.o(i.packetfunctions_sameAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_updateNextHopPayload
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_remove6PrequestToNeighbor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getNum6PReq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeAllNegotiatedCellsToNeighbor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_isNumTxWrapped
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedTxCellToNonParent
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasAutoTxCellToNeighbor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNumberOfNegotiatedCells
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getCellsToBeRelocated
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasAutonomousTxRxCellUnicast
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateSequenceNumber
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateBackoff
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_resetSequenceNumber
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_resetBackoff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getSequenceNumber
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_decreaseBackoff
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_backoffHitZero
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isThisRowMatching
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedCellToNeighbor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetUnicastPacket
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_macGetKaPacket
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_isMyAddress
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_isPreferredParent
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidRxFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidAck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_indicateRxDIO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send
</UL>

<P><STRONG><a name="[83]"></a>packetfunctions_tossFooter</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, packetfunctions.o(i.packetfunctions_tossFooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = packetfunctions_tossFooter &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[88]"></a>packetfunctions_tossHeader</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, packetfunctions.o(i.packetfunctions_tossHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = packetfunctions_tossHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_receive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifReceive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidJoin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_receive
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_SourceRouting
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwarding_send_internal_RoutingTable
</UL>

<P><STRONG><a name="[13f]"></a>packetfunctions_writeAddress</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, packetfunctions.o(i.packetfunctions_writeAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_prependIPv6Header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[1c9]"></a>prescaler</STRONG> (Thumb, 454 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[82]"></a>radio_getReceivedFrame</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, radio.o(i.radio_getReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_getReceivedFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_RSSI
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LQI
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[de]"></a>radio_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, radio.o(i.radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[14a]"></a>radio_init_divider</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.radio_init_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = radio_init_divider &rArr; divProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DIV_supply
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prescaler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[146]"></a>radio_init_rx_MF</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, scm3c_hw_interface.o(i.radio_init_rx_MF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_init_rx_MF &rArr; set_IF_stg3gm_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[147]"></a>radio_init_tx</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, scm3c_hw_interface.o(i.radio_init_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = radio_init_tx &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PA_supply
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LO_supply
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LC_current
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[48]"></a>radio_isr</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, radio.o(i.radio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IF_estimate
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Handler
</UL>

<P><STRONG><a name="[99]"></a>radio_loadPacket</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, radio.o(i.radio_loadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_loadPacket &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
</UL>

<P><STRONG><a name="[1d6]"></a>radio_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(i.radio_reset))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
</UL>

<P><STRONG><a name="[7e]"></a>radio_rfOff</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, radio.o(i.radio_rfOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_rfOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_reset
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_radio_clr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_radio_off
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[136]"></a>radio_rfOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio.o(i.radio_rfOn))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
</UL>

<P><STRONG><a name="[78]"></a>radio_rxEnable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, radio.o(i.radio_rxEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_rxEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_radio_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_radio_on
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri2
</UL>

<P><STRONG><a name="[7b]"></a>radio_rxNow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, radio.o(i.radio_rxNow))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti7
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri3
</UL>

<P><STRONG><a name="[138]"></a>radio_setEndFrameCb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.radio_setEndFrameCb))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
</UL>

<P><STRONG><a name="[98]"></a>radio_setFrequency</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio.o(i.radio_setFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = radio_setFrequency &rArr; setFrequencyTX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyTX
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyRX
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
</UL>

<P><STRONG><a name="[77]"></a>radio_setGTFrequency</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio.o(i.radio_setGTFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = radio_setGTFrequency &rArr; setGTFrequencyRX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGTFrequencyRX
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyTX
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri2
</UL>

<P><STRONG><a name="[137]"></a>radio_setStartFrameCb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.radio_setStartFrameCb))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
</UL>

<P><STRONG><a name="[9a]"></a>radio_txEnable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio.o(i.radio_txEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_txEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_radio_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_radio_on
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
</UL>

<P><STRONG><a name="[9c]"></a>radio_txNow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(i.radio_txNow))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti3
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri7
</UL>

<P><STRONG><a name="[4f]"></a>rawchips_32_isr</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, radio.o(i.rawchips_32_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rawchips_32_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAWCHIPS_32_Handler
</UL>

<P><STRONG><a name="[4e]"></a>rawchips_startval_isr</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, radio.o(i.rawchips_startval_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rawchips_startval_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAWCHIPS_STARTVAL_Handler
</UL>

<P><STRONG><a name="[1d5]"></a>read_IF_estimate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.read_IF_estimate))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[1c7]"></a>read_LQI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.read_LQI))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
</UL>

<P><STRONG><a name="[1c6]"></a>read_RSSI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.read_RSSI))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
</UL>

<P><STRONG><a name="[18e]"></a>registerNewNeighbor</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, neighbors.o(i.registerNewNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = registerNewNeighbor &rArr; isNeighbor &rArr; isThisRowMatching &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNeighbor
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateRx
</UL>

<P><STRONG><a name="[194]"></a>removeNeighbor</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, neighbors.o(i.removeNeighbor))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_removeOld
</UL>

<P><STRONG><a name="[e3]"></a>resetStats</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ieee802154e.o(i.resetStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resetStats
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
</UL>

<P><STRONG><a name="[ea]"></a>reverse</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.reverse))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32c
</UL>

<P><STRONG><a name="[168]"></a>schedule_addActiveSlot</STRONG> (Thumb, 724 bytes, Stack size 72 bytes, schedule.o(i.schedule_addActiveSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_getAsn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_addCells
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_startDAGroot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[b4]"></a>schedule_advanceSlot</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, schedule.o(i.schedule_advanceSlot))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_syncSlotOffset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[182]"></a>schedule_getCellsToBeRelocated</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, schedule.o(i.schedule_getCellsToBeRelocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = schedule_getCellsToBeRelocated &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>

<P><STRONG><a name="[b5]"></a>schedule_getChannelOffset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, schedule.o(i.schedule_getChannelOffset))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_syncSlotOffset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[b7]"></a>schedule_getFrameLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, schedule.o(i.schedule_getFrameLength))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_candidateAddCellList
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementAsnOffset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_syncSlotOffset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[fb]"></a>schedule_getIsAutoCell</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, schedule.o(i.schedule_getIsAutoCell))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>

<P><STRONG><a name="[b9]"></a>schedule_getNeighbor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, schedule.o(i.schedule_getNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schedule_getNeighbor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[b3]"></a>schedule_getNextActiveSlotOffset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, schedule.o(i.schedule_getNextActiveSlotOffset))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_ieee154e_newSlot
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_syncSlotOffset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[1f7]"></a>schedule_getNumberOfFreeEntries</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, schedule.o(i.schedule_getNumberOfFreeEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = schedule_getNumberOfFreeEntries
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[17f]"></a>schedule_getNumberOfNegotiatedCells</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, schedule.o(i.schedule_getNumberOfNegotiatedCells))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = schedule_getNumberOfNegotiatedCells &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>

<P><STRONG><a name="[ba]"></a>schedule_getOkToSend</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, schedule.o(i.schedule_getOkToSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = schedule_getOkToSend &rArr; neighbors_decreaseBackoff &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_decreaseBackoff
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_backoffHitZero
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[1f6]"></a>schedule_getOneCellAfterOffset</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, schedule.o(i.schedule_getOneCellAfterOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = schedule_getOneCellAfterOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[be]"></a>schedule_getShared</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, schedule.o(i.schedule_getShared))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[f9]"></a>schedule_getSlotInfo</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, schedule.o(i.schedule_getSlotInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schedule_getSlotInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_areAvailableCellsToBeRemoved
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>

<P><STRONG><a name="[fa]"></a>schedule_getSlottOffset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, schedule.o(i.schedule_getSlottOffset))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>

<P><STRONG><a name="[b8]"></a>schedule_getType</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, schedule.o(i.schedule_getType))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti1ORri1
</UL>

<P><STRONG><a name="[1de]"></a>schedule_hasAutoTxCellToNeighbor</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, schedule.o(i.schedule_hasAutoTxCellToNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = schedule_hasAutoTxCellToNeighbor &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
</UL>

<P><STRONG><a name="[193]"></a>schedule_hasAutonomousTxRxCellUnicast</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, schedule.o(i.schedule_hasAutonomousTxRxCellUnicast))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = schedule_hasAutonomousTxRxCellUnicast &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_removeOld
</UL>

<P><STRONG><a name="[90]"></a>schedule_hasNegotiatedCellToNeighbor</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, schedule.o(i.schedule_hasNegotiatedCellToNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = schedule_hasNegotiatedCellToNeighbor &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDIO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDAO
</UL>

<P><STRONG><a name="[17d]"></a>schedule_hasNegotiatedTxCellToNonParent</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, schedule.o(i.schedule_hasNegotiatedTxCellToNonParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = schedule_hasNegotiatedTxCellToNonParent &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>

<P><STRONG><a name="[198]"></a>schedule_indicateRx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, schedule.o(i.schedule_indicateRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schedule_indicateRx &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
</UL>

<P><STRONG><a name="[ca]"></a>schedule_indicateTx</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, schedule.o(i.schedule_indicateTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = schedule_indicateTx &rArr; neighbors_updateBackoff &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateBackoff
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_resetBackoff
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_tie5
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
</UL>

<P><STRONG><a name="[1aa]"></a>schedule_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, schedule.o(i.schedule_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = schedule_init &rArr; schedule_startDAGroot &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_startDAGroot
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_resetEntry
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_resetBackupEntry
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[181]"></a>schedule_isNumTxWrapped</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, schedule.o(i.schedule_isNumTxWrapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = schedule_isNumTxWrapped &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>

<P><STRONG><a name="[177]"></a>schedule_isSlotOffsetAvailable</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, schedule.o(i.schedule_isSlotOffsetAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = schedule_isSlotOffsetAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_areAvailableCellsToBeScheduled
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_candidateAddCellList
</UL>

<P><STRONG><a name="[fc]"></a>schedule_removeActiveSlot</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, schedule.o(i.schedule_removeActiveSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_resetEntry
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_resetBackupEntry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_removeCells
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeAllNegotiatedCellsToNeighbor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
</UL>

<P><STRONG><a name="[1e1]"></a>schedule_removeAllNegotiatedCellsToNeighbor</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, schedule.o(i.schedule_removeAllNegotiatedCellsToNeighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = schedule_removeAllNegotiatedCellsToNeighbor &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_sameAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_six2six_timeout_fired
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[e5]"></a>schedule_resetBackoff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, schedule.o(i.schedule_resetBackoff))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIsSync
</UL>

<P><STRONG><a name="[1e0]"></a>schedule_resetBackupEntry</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, schedule.o(i.schedule_resetBackupEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = schedule_resetBackupEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
</UL>

<P><STRONG><a name="[1df]"></a>schedule_resetEntry</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, schedule.o(i.schedule_resetEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = schedule_resetEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
</UL>

<P><STRONG><a name="[166]"></a>schedule_setFrameHandle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, schedule.o(i.schedule_setFrameHandle))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_startDAGroot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[167]"></a>schedule_setFrameLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, schedule.o(i.schedule_setFrameLength))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_startDAGroot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[165]"></a>schedule_setFrameNumber</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, schedule.o(i.schedule_setFrameNumber))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_startDAGroot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[132]"></a>schedule_startDAGroot</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, schedule.o(i.schedule_startDAGroot))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = schedule_startDAGroot &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setFrameNumber
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setFrameLength
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setFrameHandle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_setIsDAGroot
</UL>

<P><STRONG><a name="[13b]"></a>schedule_syncSlotOffset</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, schedule.o(i.schedule_syncSlotOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = schedule_syncSlotOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advanceSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_syncSlotOffset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_processIEs
</UL>

<P><STRONG><a name="[173]"></a>scheduler_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, scheduler.o(i.scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[16d]"></a>scheduler_push_task</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, scheduler.o(i.scheduler_push_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scheduler_push_task &rArr; leds_error_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_reset
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_error_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_timer_callback
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_rx
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_handleRCError
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_sendDone
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_receive
</UL>

<P><STRONG><a name="[175]"></a>scheduler_start</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, scheduler.o(i.scheduler_start))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_task_set
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_task_clr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[1b5]"></a>scm3c_hw_interface_get_HF_CLOCK_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_HF_CLOCK_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1b4]"></a>scm3c_hw_interface_get_HF_CLOCK_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_HF_CLOCK_fine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1b9]"></a>scm3c_hw_interface_get_IF_clk_target</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_IF_clk_target))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1ba]"></a>scm3c_hw_interface_get_IF_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_IF_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1bb]"></a>scm3c_hw_interface_get_IF_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_IF_fine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1b6]"></a>scm3c_hw_interface_get_RC2M_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_RC2M_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1b7]"></a>scm3c_hw_interface_get_RC2M_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_RC2M_fine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1b8]"></a>scm3c_hw_interface_get_RC2M_superfine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_RC2M_superfine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[143]"></a>scm3c_hw_interface_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scm3c_hw_interface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[1bc]"></a>scm3c_hw_interface_set_HF_CLOCK_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_HF_CLOCK_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1bd]"></a>scm3c_hw_interface_set_HF_CLOCK_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_HF_CLOCK_fine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1c1]"></a>scm3c_hw_interface_set_IF_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_IF_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1c2]"></a>scm3c_hw_interface_set_IF_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_IF_fine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1be]"></a>scm3c_hw_interface_set_RC2M_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_RC2M_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1bf]"></a>scm3c_hw_interface_set_RC2M_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_RC2M_fine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1c0]"></a>scm3c_hw_interface_set_RC2M_superfine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_RC2M_superfine))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1e5]"></a>sctimer_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sctimer.o(i.sctimer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_setCompare
</UL>

<P><STRONG><a name="[dd]"></a>sctimer_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sctimer.o(i.sctimer_init))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[49]"></a>sctimer_isr</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, sctimer.o(i.sctimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sctimer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTIMER_Handler
</UL>

<P><STRONG><a name="[79]"></a>sctimer_readCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sctimer.o(i.sctimer_readCounter))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_timer_callback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_getValue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSlot
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti9
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti6
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ti2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_newSlot
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri2
</UL>

<P><STRONG><a name="[1b3]"></a>sctimer_setCompare</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, sctimer.o(i.sctimer_setCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_timer_callback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
</UL>

<P><STRONG><a name="[1b2]"></a>sctimer_set_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sctimer.o(i.sctimer_set_callback))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_init
</UL>

<P><STRONG><a name="[127]"></a>sendDAO</STRONG> (Thumb, 638 bytes, Stack size 48 bytes, icmpv6rpl.o(i.sendDAO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = sendDAO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_writeAddress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_calculateChecksum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_removeAllCreatedBy
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_isNeighborWithHigherDAGrank
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getNeighborEui64
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedCellToNeighbor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_isSynch
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DAO_task
</UL>

<P><STRONG><a name="[128]"></a>sendDIO</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, icmpv6rpl.o(i.sendDIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getMyID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_calculateChecksum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_removeAllCreatedBy
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedCellToNeighbor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idmanager_getIsDAGroot
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getPreferredParentEui64
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_isSynch
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_timer_DIO_task
</UL>

<P><STRONG><a name="[1dc]"></a>setFrequencyRX</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, radio.o(i.setFrequencyRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setFrequencyRX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
</UL>

<P><STRONG><a name="[1db]"></a>setFrequencyTX</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, radio.o(i.setFrequencyTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setFrequencyTX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setGTFrequency
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
</UL>

<P><STRONG><a name="[1dd]"></a>setGTFrequencyRX</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, radio.o(i.setGTFrequencyRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setGTFrequencyRX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setGTFrequency
</UL>

<P><STRONG><a name="[149]"></a>set_2M_RC_frequency</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, scm3c_hw_interface.o(i.set_2M_RC_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_2M_RC_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_lsb8
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1c8]"></a>set_DIV_supply</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_DIV_supply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_DIV_supply
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[1cf]"></a>set_IF_LDO_voltage</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, scm3c_hw_interface.o(i.set_IF_LDO_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_IF_LDO_voltage &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[148]"></a>set_IF_clock_frequency</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, scm3c_hw_interface.o(i.set_IF_clock_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_IF_clock_frequency &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1cd]"></a>set_IF_comparator_trim_I</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_comparator_trim_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_comparator_trim_I &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[1ce]"></a>set_IF_comparator_trim_Q</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_comparator_trim_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_comparator_trim_Q &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[1cb]"></a>set_IF_gain_ASC</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_gain_ASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_gain_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[1cc]"></a>set_IF_stg3gm_ASC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_stg3gm_ASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_stg3gm_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[1d0]"></a>set_LC_current</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_LC_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_LC_current
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[1d2]"></a>set_LO_supply</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_LO_supply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_LO_supply
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[1d1]"></a>set_PA_supply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.set_PA_supply))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[68]"></a>set_asc_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_asc_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
</UL>

<P><STRONG><a name="[145]"></a>set_sys_clk_secondary_freq</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_sys_clk_secondary_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_sys_clk_secondary_freq &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[1e7]"></a>sixtop_addCells</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, sixtop.o(i.sixtop_addCells))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = sixtop_addCells &rArr; schedule_addActiveSlot &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[1e8]"></a>sixtop_areAvailableCellsToBeRemoved</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, sixtop.o(i.sixtop_areAvailableCellsToBeRemoved))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sixtop_areAvailableCellsToBeRemoved &rArr; schedule_getSlotInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getSlotInfo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[1e9]"></a>sixtop_areAvailableCellsToBeScheduled</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sixtop.o(i.sixtop_areAvailableCellsToBeScheduled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sixtop_areAvailableCellsToBeScheduled &rArr; schedule_isSlotOffsetAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_isSlotOffsetAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[1ab]"></a>sixtop_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sixtop.o(i.sixtop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sixtop_init &rArr; opentimers_scheduleIn &rArr; sctimer_setCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_create
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openstack_init
</UL>

<P><STRONG><a name="[2d]"></a>sixtop_maintenance_timer_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sixtop.o(i.sixtop_maintenance_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = sixtop_maintenance_timer_cb &rArr; timer_sixtop_management_fired &rArr; sixtop_sendKA &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_management_fired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sixtop.o(i.sixtop_init)
</UL>
<P><STRONG><a name="[1eb]"></a>sixtop_processIEs</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, sixtop.o(i.sixtop_processIEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = sixtop_processIEs &rArr; sixtop_six2six_notifyReceive &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifReceive
</UL>

<P><STRONG><a name="[1ed]"></a>sixtop_removeCells</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, sixtop.o(i.sixtop_removeCells))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = sixtop_removeCells &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeActiveSlot
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
</UL>

<P><STRONG><a name="[17e]"></a>sixtop_request</STRONG> (Thumb, 992 bytes, Stack size 56 bytes, sixtop.o(i.sixtop_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = sixtop_request &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_remove6PrequestToNeighbor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getNum6PReq
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getSequenceNumber
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_trigger6pAdd
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_timer_clear_task
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_housekeeping
</UL>

<P><STRONG><a name="[15e]"></a>sixtop_send</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sixtop.o(i.sixtop_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_getSecurityLevel
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_getDataKeyIndex
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromForwarding
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendFromBridge
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_notifyReceive
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_request
</UL>

<P><STRONG><a name="[1f1]"></a>sixtop_sendEB</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, sixtop.o(i.sixtop_sendEB))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = sixtop_sendEB &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_isConfigured
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_getBeaconKeyIndex
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_removeAllCreatedBy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_daoSent
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getFrameLength
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6rpl_getMyDAGrank
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_isSynch
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_sendEb_fired
</UL>

<P><STRONG><a name="[1f3]"></a>sixtop_sendKA</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sixtop.o(i.sixtop_sendKA))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sixtop_sendKA &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE802154_security_getDataKeyIndex
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_removeAllCreatedBy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send_internal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getKANeighbor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedCellToNeighbor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee154e_isSynch
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_management_fired
</UL>

<P><STRONG><a name="[1f0]"></a>sixtop_send_internal</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sixtop.o(i.sixtop_send_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_isBroadcastMulticast
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_prependHeader
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_hashFunction_getSlotoffset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_hashFunction_getChanneloffset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasAutoTxCellToNeighbor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasNegotiatedCellToNeighbor
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_addActiveSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send
</UL>

<P><STRONG><a name="[2c]"></a>sixtop_sendingEb_timer_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sixtop.o(i.sixtop_sendingEb_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = sixtop_sendingEb_timer_cb &rArr; timer_sixtop_sendEb_fired &rArr; sixtop_sendEB &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_sendEb_fired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sixtop.o(i.sixtop_init)
</UL>
<P><STRONG><a name="[184]"></a>sixtop_setSFcallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sixtop.o(i.sixtop_setSFcallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sixtop_setSFcallback
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msf_init
</UL>

<P><STRONG><a name="[1ec]"></a>sixtop_six2six_notifyReceive</STRONG> (Thumb, 3592 bytes, Stack size 136 bytes, sixtop.o(i.sixtop_six2six_notifyReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = sixtop_six2six_notifyReceive &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_cancel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_reserveHeader
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_remove6PrequestToNeighbor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getNum6PResp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_send
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_removeCells
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_areAvailableCellsToBeScheduled
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_areAvailableCellsToBeRemoved
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_addCells
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeAllNegotiatedCellsToNeighbor
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getOneCellAfterOffset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getNumberOfFreeEntries
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateSequenceNumber
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_resetSequenceNumber
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_getSequenceNumber
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_getFrameLength
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_getFreePacketBuffer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_processIEs
</UL>

<P><STRONG><a name="[1f9]"></a>sixtop_six2six_sendDone</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, sixtop.o(i.sixtop_six2six_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = sixtop_six2six_sendDone &rArr; sixtop_removeCells &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleIn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_six2six_timeout_fired
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_removeCells
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_addCells
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeAllNegotiatedCellsToNeighbor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_updateSequenceNumber
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_resetSequenceNumber
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sixtopNotifSendDone
</UL>

<P><STRONG><a name="[2e]"></a>sixtop_timeout_timer_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sixtop.o(i.sixtop_timeout_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = sixtop_timeout_timer_cb &rArr; timer_sixtop_six2six_timeout_fired &rArr; schedule_removeAllNegotiatedCellsToNeighbor &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sixtop_six2six_timeout_fired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sixtop.o(i.sixtop_six2six_sendDone)
</UL>
<P><STRONG><a name="[91]"></a>synchronizePacket</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ieee802154e.o(i.synchronizePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = synchronizePacket &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_scheduleAbsolute
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_getValue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateStats
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementAsnOffset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_synchronize_endOfFrame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri9
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_ri5
</UL>

<P><STRONG><a name="[1a3]"></a>task_openserial_debugPrint</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, openserial.o(i.task_openserial_debugPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = task_openserial_debugPrint &rArr; debugPrint_queue &rArr; openserial_printStatus &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_schedule
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_queue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_neighbors
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_myDAGrank
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_msf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_macStats
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_kaPeriod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_joined
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_isSync
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_id
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_backoff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_asn
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint_outBufferIndexes
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_debugPrint_timer_cb
</UL>

<P><STRONG><a name="[1c]"></a>task_printInputBufferOverflow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, openserial.o(i.task_printInputBufferOverflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = task_printInputBufferOverflow &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openserial.o(i.isr_openserial_rx)
</UL>
<P><STRONG><a name="[1d]"></a>task_printWrongCRCInput</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, openserial.o(i.task_printWrongCRCInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = task_printWrongCRCInput &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openserial.o(i.isr_openserial_rx)
</UL>
<P><STRONG><a name="[25]"></a>task_sixtopNotifReceive</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, sixtop.o(i.task_sixtopNotifReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = task_sixtopNotifReceive &rArr; iphc_receive &rArr; forwarding_receive &rArr; icmpv6_receive &rArr; icmpv6rpl_receive &rArr; icmpv6rpl_timer_DIO_task &rArr; sendDIO &rArr; icmpv6_send &rArr; forwarding_send &rArr; forwarding_send_internal_RoutingTable &rArr; iphc_sendFromForwarding &rArr; sixtop_send &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_sixtopGetReceivedPacket
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_receive
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_processIEs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateRx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetfunctions_tossHeader
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802154e.o(i.notif_receive)
</UL>
<P><STRONG><a name="[26]"></a>task_sixtopNotifSendDone</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, sixtop.o(i.task_sixtopNotifSendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = task_sixtopNotifSendDone &rArr; sixtop_six2six_sendDone &rArr; sixtop_removeCells &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_printLog
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_sixtopGetSentPacket
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_sendDone
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_indicateTx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openqueue_freePacketBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ieee802154e.o(i.notif_sendDone)
</UL>
<P><STRONG><a name="[1ea]"></a>timer_sixtop_management_fired</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sixtop.o(i.timer_sixtop_management_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = timer_sixtop_management_fired &rArr; sixtop_sendKA &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendKA
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_removeOld
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_maintenance_timer_cb
</UL>

<P><STRONG><a name="[1f4]"></a>timer_sixtop_sendEb_fired</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sixtop.o(i.timer_sixtop_sendEb_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = timer_sixtop_sendEb_fired &rArr; sixtop_sendEB &rArr; sixtop_send_internal &rArr; ieee802154_prependHeader &rArr; packetfunctions_writeAddress &rArr; packetfunctions_reserveHeader &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendEB
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openrandom_get16b
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_sendingEb_timer_cb
</UL>

<P><STRONG><a name="[1fa]"></a>timer_sixtop_six2six_timeout_fired</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sixtop.o(i.timer_sixtop_six2six_timeout_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = timer_sixtop_six2six_timeout_fired &rArr; schedule_removeAllNegotiatedCellsToNeighbor &rArr; schedule_removeActiveSlot &rArr; packetfunctions_sameAddress &rArr; openserial_printLog &rArr; internal_openserial_print &rArr; openserial_flush &rArr; uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opentimers_cancel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_removeAllNegotiatedCellsToNeighbor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbors_resetSequenceNumber
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_timeout_timer_cb
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixtop_six2six_sendDone
</UL>

<P><STRONG><a name="[164]"></a>timeslotTemplateIDStoreFromEB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee802154e.o(i.timeslotTemplateIDStoreFromEB))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidEbFormat
</UL>

<P><STRONG><a name="[141]"></a>topology_isAcceptablePacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, topology.o(i.topology_isAcceptablePacket))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802154_retrieveHeader
</UL>

<P><STRONG><a name="[1a7]"></a>uart_enableInterrupts</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(i.uart_enableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_init
</UL>

<P><STRONG><a name="[dc]"></a>uart_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[115]"></a>uart_out</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.uart_out))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[16b]"></a>uart_readByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.uart_readByte))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_rx
</UL>

<P><STRONG><a name="[46]"></a>uart_rx_isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(i.uart_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_rx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[170]"></a>uart_setCTS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(i.uart_setCTS))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_flush
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_tx
</UL>

<P><STRONG><a name="[1a6]"></a>uart_setCallbacks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.uart_setCallbacks))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_init
</UL>

<P><STRONG><a name="[1fe]"></a>uart_tx_isr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(i.uart_tx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_writeByte
</UL>

<P><STRONG><a name="[171]"></a>uart_writeByte</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(i.uart_writeByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = uart_writeByte &rArr; uart_tx_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openserial_flush
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_openserial_tx
</UL>

<P><STRONG><a name="[1fb]"></a>updateStats</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ieee802154e.o(i.updateStats))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchronizePacket
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[61]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[60]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[57]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
